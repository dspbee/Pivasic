<?php
namespace Pivasic\Test\Bundle\Common\File;

use PHPUnit\Framework\TestCase;
use Pivasic\Bundle\Common\File\File;

class FileTest extends TestCase
{
    private $root;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->root = dirname(__FILE__) . '/files';
    }

    /**
     * @expectedException Pivasic\Bundle\Common\File\Exception\FileNotFoundException
     */
    public function testFileNotFoundException()
    {
         new File($this->root . '/temp.txt');
    }

    public function testMove()
    {
        $file = new File($this->root . '/test.gif');
        $path = $file->move($this->root . '/directory');
        $this->assertNotEquals(0, strpos($path, 'files/directory'));
        copy($this->root . '/directory/test.gif', $this->root . '/test.gif');
        unlink($this->root . '/directory/test.gif');
    }

    public function testGuessExtension()
    {
        $file = new File($this->root . '/test.gif');
        $this->assertEquals('gif', $file->guessExtension());

        $file = new File($this->root . '/test');
        $this->assertEquals('gif', $file->guessExtension());

        $file = new File($this->root . '/other-file.example');
        $this->assertNull($file->guessExtension());

        $file = new File($this->root . '/.unknownextension');
        $this->assertEquals('bin', $file->guessExtension());
    }

    public function testGuessMimeType()
    {
        $file = new File($this->root . '/test.gif');
        $this->assertEquals('image/gif', $file->guessMimeType());

        $file = new File($this->root . '/test');
        $this->assertEquals('image/gif', $file->guessMimeType());

        $file = new File($this->root . '/other-file.example');
        $this->assertEquals('inode/x-empty', $file->guessMimeType());

        $file = new File($this->root . '/.unknownextension');
        $this->assertEquals('application/octet-stream', $file->guessMimeType());
    }
}